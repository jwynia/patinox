[workspace]
resolver = "2"
members = [
    # Core crates will be added here as development progresses
    # "patinox-core",
    # "patinox-agent", 
    # "patinox-validation",
    # "patinox-monitor",
    # "patinox-runtime",
    # "patinox-telemetry",
    # "patinox-storage",
    # "patinox-meta",
    # "patinox-evolution",
    # "patinox-bindings",
]

[package]
name = "patinox"
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true
readme.workspace = true
keywords.workspace = true
categories.workspace = true
description = "Self-improving AI agent framework built on Rust with type-safe abstractions and automated monitoring"

[dependencies]
# Error handling
thiserror.workspace = true
anyhow.workspace = true

# Core trait dependencies
async-trait.workspace = true
serde.workspace = true
serde_json.workspace = true
uuid = { version = "1.11", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
tower.workspace = true

[dev-dependencies]
criterion.workspace = true
proptest.workspace = true
tokio.workspace = true
tokio-test.workspace = true

[features]
default = []
# Feature flag for CI-specific tests
ci-tests = []

[workspace.package]
version = "0.1.0"
authors = ["Patinox Contributors"]
edition = "2021"
rust-version = "1.80"
license = "MIT OR Apache-2.0"
repository = "https://github.com/patinox/patinox"
homepage = "https://github.com/patinox/patinox"
documentation = "https://docs.rs/patinox"
readme = "README.md"
keywords = ["ai", "agents", "llm", "monitoring", "validation"]
categories = ["development-tools", "asynchronous"]

[workspace.dependencies]
# Core async runtime
tokio = { version = "1.40", features = ["full"] }

# LLM integration
async-openai = "0.24"
# rig = "0.3"  # To be added when available

# Validation and middleware
tower = { version = "0.5", features = ["full"] }
tower-http = { version = "0.5", features = ["trace", "compression"] }

# Observability
opentelemetry = { version = "0.27", features = ["trace", "metrics"] }
opentelemetry-otlp = "0.27"
tracing = "0.1"
tracing-opentelemetry = "0.27"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
toml = "0.8"

# Error handling
thiserror = "2.0"
anyhow = "1.0"

# Async utilities
futures = "0.3"
async-trait = "0.1"

# Testing
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.6"
mockito = "1.6"
tokio-test = "0.4"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
strip = true

[profile.bench]
inherits = "release"

[profile.dev]
opt-level = 0
debug = true

[profile.test]
opt-level = 2
debug = true